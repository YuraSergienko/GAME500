		include	"8080.inc"
		fat 	equ 0x1300
		org 	0x100
		di
	  	lxi	sp,7000h		; установка стека
		mvi	a,0xc3
  		sta	0x0038
		lxi	h,interrupt
		shld	0x039			; ссылка на обработку прерывания (опрос клавиатуры)
		ei
;		call	palette_init2		; сброс палитры
		call	cls
		mvi	a,0x88
		out	0x00			; инициализация порта 0
		mvi	a,0xff
		out	0x03 			; установка скролинга
		call	palette_init		; установка палитры
		call	print_frame             ; рисование рамки
		call	print_table             ; вывод списка файлов
		call	print_page		; вывод номера страницы и файла
main0:		nop
		call	set_cursor		; рисование курсора
		lda	key_up 			; проверка нажатия клавиши "вверх"
		ora	a
		jz	main2 
main1_1:	lda	key_up
		ora	a
		jnz	main1_1
		call	reset_cursor		; стирание курсора
		lda	pos
		dcr	a
		jnz	main1_2
		mvi	a,25
main1_2:	sta	pos
		call	print_page		; вывод номера страницы и файла

main2:		lda	key_down  		; проверка нажатия клавиши "вниз"
		ora	a
		jz	main3
main2_1:	lda	key_down
		ora	a
		jnz	main2_1
		call	reset_cursor
		lda	pos
		inr	a
		cpi	26
		jnz	main2_2
		mvi	a,1
main2_2:	sta	pos
		call	print_page

main3:		lda	key_right 		; проверка нажатия клавиши "вправо"
		ora	a
		jz	main4
main3_1:	lda	key_right
		ora	a
		jnz	main3_1
		call	reset_cursor
		lda	row
		inr	a
		cpi	3
		jnz	main3_2
		lda	page
		inr	a
		cpi	11
		jnz	main3_3
		mvi	a,1
		sta	page
		call	print_table
		mvi	a,1
		jmp	main3_2
main3_3:	sta	page
		call	print_table
		mvi	a,1
main3_2:	sta	row
		call	print_page
      
main4:		lda	key_left ; проверка нажатия клавиши "влево"
		ora	a
		jz	main5
main4_1:	lda	key_left
		ora	a
		jnz	main4_1
		call	reset_cursor
		jnz	main3_2
		lda	row
		dcr	a
		jnz	main4_2
		lda	page
		dcr	a
		jnz	main4_3
		mvi	a,10
main4_3:	sta	page
		mvi	a,2
main4_2:	sta	row
		call	print_table
		call	print_page

main5:		lda	key_1 ; проверка нажатия клавиши 1
		ora	a
		jz	main6
main5_1:	lda	key_1
		ora	a
		jnz	main5_1
		call	reset_cursor
		mvi	a,0x01
		sta	page
		call	print_table
		call	print_page

main6:		lda	key_2 ; проверка нажатия клавиши 2
		ora	a
		jz	main7
main6_1:	lda	key_2
		ora	a
		jnz	main6_1
		call	reset_cursor
		mvi	a,0x02
		sta	page
		call	print_table
		call	print_page

main7:		lda	key_3 ; проверка нажатия клавиши 3
		ora	a
		jz	main8
main7_1:	lda	key_3
		ora	a
		jnz	main7_1
		call	reset_cursor
		mvi	a,0x03
		sta	page
		call	print_table
		call	print_page

main8:		lda	key_4 ; проверка нажатия клавиши 4
		ora	a
		jz	main9
main8_1:	lda	key_4
		ora	a
		jnz	main8_1
		call	reset_cursor
		mvi	a,0x04
		sta	page
		call	print_table
		call	print_page

main9:		lda	key_5 ; проверка нажатия клавиши 5
		ora	a
		jz	main10
main9_1:	lda	key_5
		ora	a
		jnz	main9_1
		call	reset_cursor
		mvi	a,0x05
		sta	page
		call	print_table
		call	print_page

main10:		lda	key_6 ; проверка нажатия клавиши 6
		ora	a
		jz	main11
main10_1:	lda	key_6
		ora	a
		jnz	main10_1
		call	reset_cursor
		mvi	a,0x06
		sta	page
		call	print_table
		call	print_page

main11:		lda	key_7 ; проверка нажатия клавиши 7
		ora	a
		jz	main12
main11_1:	lda	key_7
		ora	a
		jnz	main11_1
		call	reset_cursor
		mvi	a,0x07
		sta	page
		call	print_table
		call	print_page

main12:		lda	key_8 ; проверка нажатия клавиши 8
		ora	a
		jz	main13
main12_1:	lda	key_8
		ora	a
		jnz	main12_1
		call	reset_cursor
		mvi	a,0x08
		sta	page
		call	print_table
		call	print_page

main13:		lda	key_9 ; проверка нажатия клавиши 9
		ora	a
		jz	main14
main13_1:	lda	key_9
		ora	a
		jnz	main13_1
		call	reset_cursor
		mvi	a,0x09
		sta	page
		call	print_table
		call	print_page

main14:		lda	key_0 ; проверка нажатия клавиши 0
		ora	a
		jz	main15
main14_1:	lda	key_0
		ora	a
		jnz	main14_1
		call	reset_cursor
		mvi	a,0x0a
		sta	page
		call	print_table
		call	print_page
main15:		lda	key_space ; проверка нажатия клавиши "пробел"
		ora	a
		jz	main0
;		call	palette_init2
		call	cls
; копирование программы загрузки из флеш в адрес 0xe000
		mvi	c,0xff
		lxi	d,loader+1
		lxi	h,0xe000
main15_1:	ldax	d
		mov	m,a
		inx	h
		inx	d
		dcr	c
		jnz	main15_1
; перевод GAME500 из режима 1 в режим 2
		mvi a,0x00
		out 0x05
; clock для исключения фантомных клоков до этого !!! попробывать убрать это
		mvi a,0x10
		out 0x05
		inx d	; delay	3
		inx d
		inx d
		mvi a,0x00
		out 0x05
; запись в порт первого кодового байта 0xAA
		mvi a,0xaa
		out 0x07
		inx d	; delay
		inx d	; delay
		inx d	; delay	
		inx d	; delay
		inx d	; delay	
; запись в порт второго кодового байта 0x55
		mvi a,0x55
		out 0x07
		inx d	; delay	
		inx d	; delay
		inx d	; delay	
		inx d	; delay
		inx d	; delay	
; вычисление номера файла
		mvi	h,0x00
		mov	l,h
		mov	d,h
		lda	page
main15_2:
		dcr	a
		jz	main15_3
		mvi	e,50
		dad	d
		jmp	main15_2
main15_3:
		lda	row
		dcr	a
		jz	main15_4
		mvi	e,25
		dad	d
main15_4:	
		lda	pos
		mov	e,a
		dad	d
		call	get_offset		; получение смещение в таблице FAT по номеру файла
		lxi	d,16
		dad	d
		mov	d,m			; загрузка в D страшего байта смещения в флэш
		inx	h
		mov	e,m			; загрузка в E младшего байта смещения в флэш
		inx	h
		mov	a,m			
		ral	
		ral	
		ral	
		ral	
		ral	
		mov	b,a                     ; загрузка в B счетчика байтов
		mvi	c,0x00
 	  	lxi	sp,0xf000 ; установка стека
		jmp 	0xe000 ; de - flash offset, bc - byte count
; подпрограммы ===============================================================

; деление на 10
divide:
;BC=делимое
;DE=делитель
;BC=частное
;DE=остаток
		MOV A,D ;изменение знака делителя
		CMA
		MOV D,A
		MOV A,E
		CMA
		MOV E,A
		INX D ;для дополнительного кода
		LXI H,0 ;начальное значение остатка
		MVI A,17 ;инициализация счетчика
DV0: 		PUSH H ;сохранение остатка
		DAD D ;вычитание делителя
		JNC DV1
		XTHL
DV1: 		POP H
		PUSH PSW ;запоминание счетчика
		MOV A,C ;сдвиг влево через перенос четырех
		RAL ;регистров
		MOV C,A ;CY-->C-->B-->L-->H
		MOV A,B
		RAL
		MOV B,A
		MOV A,L
		RAL
		MOV L,A
		MOV A,H
		RAL
		MOV H,A
		POP PSW ;восстановление счетчика
		DCR A ;декремент счетчика
		JNZ DV0
;
;очистка после деления, сдвиг остатка вправо
;и возврат из подпрограммы
		ORA A
		MOV A,H
		RAR
		MOV B,A
		MOV A,L
		RAR
		MOV E,A
		RET

; возвращает смещение на файл в таблице fat. in: hl - number of file out: hl - file offset
get_offset:
		push	h
		pop	d
;hlx2
		mov	a,l
		ral
		mov	l,a
		mov	a,h
		ral
		mov	h,a
;hlx4
		mov	a,l
		ral
		mov	l,a
		mov	a,h
		ral
		mov	h,a
;hlx8
		mov	a,l
		ral
		mov	l,a
		mov	a,h
		ral
		mov	h,a
;hlx16
		mov	a,l
		ral
		mov	l,a
		mov	a,h
		ral
		mov	h,a
; hlx20
		dad	d
		dad	d
		dad	d
		dad	d

		lxi	d,fat
		dad	d
		ret

; рисование курсора. положение по переменным pos и row
set_cursor:	lxi	d,pos
;		xri	0xff
		ldax	d
		inr	a
		inr	a
		mov	l,a
		add	l
		add	l
		add	l
		add	l
		add	l
		add	l
		add	l
		mov	l,a
		mvi	a,0xff
		sub	l
		mov	l,a
		lxi	d,row
		ldax	d
		dcr	a
		rlc
		rlc
		rlc
		rlc
		mvi	h,0xc0
		add	h
		mov	h,a
		mvi	a,'>'
		call	print_char
		ret		

; стирание курсора. положение по переменным pos и row
reset_cursor:	lxi	d,pos
		ldax	d
		inr	a
		inr	a
		mov	l,a
		add	l
		add	l
		add	l
		add	l
		add	l
		add	l
		add	l
		mov	l,a
		mvi	a,0xff
		sub	l
		mov	l,a
		lxi	d,row
		ldax	d
		dcr	a
		rlc
		rlc
		rlc
		rlc
		mvi	h,0xc0
		add	h
		mov	h,a
		mvi	a,' '
		call	print_char
		ret		

; печать номера страницы и файла
print_page:
		lda	page
		cpi	10
		jnz	print_page1
		mvi	a,0x30
		sta	str_page+7
		mvi	a,1
		adi	0x30
		sta	str_page+6
		jmp	print_file1
print_page1:
		adi	0x30
		sta	str_page+6
		mvi	a,0x20
		sta	str_page+7
print_file1:
; вычисляем номер файла по странице, колонке и позиции
		lxi	d,50
		lxi	h,0
		lda	page
print_file4:	dcr	a
		jz	print_file3
		dad	d
		jmp	print_file4		
print_file3:	lxi	d,25
		lda	row
		dcr	a
		jz	print_file5
		dad	d
print_file5:	lda	pos
		mov	e,a
		mvi	d,0x00
		dad	d
; в HL - номер файла
; делим на 100
		inr	h
		mvi	c,0
print_file7:	mov	a,l
		sui	100
		jnc	print_file6
		dcr	h
		jz	print_file8
print_file6:	mov	l,a
		inr	c
		jmp	print_file7
print_file8:
		mov	a,c
		adi	0x30
		sta	str_page+18
; делим на 10
		mvi	h,1; в L остаток десятки
		mvi	c,0
print_file9:	mov	a,l
		sui	10
		jnc	print_file10
		dcr	h
		jz	print_file11
print_file10:	mov	l,a
		inr	c
		jmp	print_file9
print_file11:
		mov	a,c
		adi	0x30
		sta	str_page+19
		mov	a,l; в L остаток единицы
		adi	0x30
		sta	str_page+20
		lxi	b,0x231d
		lxi	d,str_page
		call	print2_string
		ret
; вывести рамку
print_frame:
		lxi	d,net
		lxi	b,0x0000
		call	print2_string
		lxi	d,net+33
		inr	c
		call	print2_string
		lxi	d,net+66
		inr	c
		call	print2_string
		lxi	d,net+99
		inr	c
print_frame2:
		call	print2_string
		inr	c
		mov	a,c
		cpi	28
		jnz	print_frame2		
		lxi	d,net+132
		call	print2_string
		lxi	d,net+165
		lxi	b,0x001f
		call	print2_string
		ret
;-----------------------------------------------------------------------
print_table:
		lxi	h,0x0001
		lda	page
print_table5:
		dcr	a
		jz	print_table4
		lxi	d,50
		dad	d
		jmp	print_table5
print_table4:
		call	get_offset
		xchg		
		lxi	b,0x2103
print_table2:
		ldax	d
		ora	a
		jnz	print_table22
		lxi	d,empty
print_table22:	call	print2_string
		lxi	h,20
		dad	d
		xchg
		inr	c
		mov	a,c
		cpi	28
		jnz	print_table2		

		lxi	b,0x3103
print_table3:
		ldax	d
		ora	a
		jnz	print_table33
		lxi	d,empty
print_table33:	call	print2_string
		lxi	h,20
		dad	d
		xchg
		inr	c
		mov	a,c
		cpi	28
		jnz	print_table3

		call	print_page
		ret

;----------------------------------------------------------------------
; выводит строку на экран. dx - строка, b - x, c - y
print2_string:
		push	h
		push	b
		push	d
		mov	a,c
		rlc
		rlc
		rlc
 		mov	l,a
		mvi	a,0xff
		sub	l
		mov	l,a
		mvi	a,0xa0
		add	b
		mov	h,a
print2_string1:	
		ldax	d
		cpi	0x00
		jz	print2_string2
		call	print_char
		inx	d
		inr	h
		jmp	print2_string1
print2_string2:
		pop	d
		pop 	b
		pop	h
		ret

;----------------------------------------------------------------------
print_char:		; выводит символ на экран. a - символ, hl - адрес на экране
	  	push	d                                             
	  	push	b                                             
	  	push	h                                             
		push	h
	  	mvi	h,0x00
	  	mov	l,a                                           
	  	dad	h                                             
	  	dad	h                                             
	  	dad	h                                             
	  	lxi	d,Char_000
	  	dad	d                                             
	  	xchg                                                  
	  	pop	h                                             
	  	mvi	b,08h                                         
print_char1:
		ldax	d
	  	mov	m,a                                           
	  	inx	d                                             
	  	dcr	l                                             
	  	dcr	b                                             
	  	jnz	print_char1
		pop	h
	  	pop	b                                             
	  	pop	d                                             
		ret                                                   
; программирование палитры 1
palette_init:	
		ei			; запрет прерываний
		hlt			; остановка процессора
		lxi	h,palette
		mvi	d,10h
palette_init1:	mov	a,d
	  	dcr	a
	  	out	02h
	  	mov	a,m
	  	out	0fh
	  	out	0fh
	  	inx	h
	  	out	0fh
	  	dcr	d
	  	out	0fh
	  	jnz	palette_init1
		ret
; программирование палитры 2
palette_init2:	
		ei			; запрет прерываний
		hlt			; остановка процессора
		lxi	h,palette0
		mvi	d,10h
palette_init21:	mov	a,d
	  	dcr	a
	  	out	02h
	  	mov	a,m
	  	out	0fh
	  	out	0fh
	  	inx	h
	  	out	0fh
	  	dcr	d
	  	out	0fh
	  	jnz	palette_init21
		ret
; clear screen
cls:		lxi	h,0x8000
cls1:		mvi	m,00h
	  	inx	h
	  	mov	a,h
	  	ora	a
	  	jnz	cls1
		ret
;------------------------ interrupt
interrupt:	nop
		di
		push	psw
		push	h
		push	d
		push	b
		mvi	a,0x8a
		out	0x00

		mvi	a,0xfe
		out	0x03
		in	0x02
		ani	0x20 ; up
		jnz	int1_2
		lda	key_up
		inr	a
		jnz	int1_1		
		xra	a
		dcr	a
int1_1:		sta	key_up
		jmp	int2_0
int1_2:		xra	a
		sta	key_up
		jmp	int2_0

int2_0:		mvi	a,0xfe
		out	0x03
		in	0x02
		ani	0x80 ; down
		jnz	int2_2
		lxi	d,key_down
		ldax	d
		inr	a
		jnz	int2_1		
		mvi	a,0xff
int2_1:		stax	d
		jmp	int3_0
int2_2:		lxi	d,key_down
		mvi	a,0x00
		stax	d
		jmp	int3_0

int3_0:		mvi	a,0xfe
		out	0x03
		in	0x02
		ani	0x10 ; left
		jnz	int3_2
		lxi	d,key_left
		ldax	d
		inr	a
		jnz	int3_1		
		mvi	a,0xff
int3_1:		stax	d
		jmp	int4_0
int3_2:		lxi	d,key_left
		mvi	a,0x00
		stax	d
		jmp	int4_0

int4_0:		mvi	a,0xfe
		out	0x03
		in	0x02
		ani	0x40 ; right
		jnz	int4_2
		lxi	d,key_right
		ldax	d
		inr	a
		jnz	int4_1		
		mvi	a,0xff
int4_1:		stax	d
		jmp	int5_0
int4_2:		lxi	d,key_right
		mvi	a,0x00
		stax	d
		jmp	int5_0

int5_0:		mvi	a,0x7f
		out	0x03
		in	0x02
		ani	0x80 ; space
		jnz	int5_2
		lxi	d,key_space
		ldax	d
		inr	a
		jnz	int5_1		
		mvi	a,0xff
int5_1:		stax	d
		jmp	int6_0
int5_2:		lxi	d,key_space
		mvi	a,0x00
		stax	d
		jmp	int6_0
; опрос цифровых клавиш
int6_0:	
		mvi	a,0xfb
		out	0x03
		in	0x02
		ani	0x01 ; 0
		jnz	int6_2
		lda	key_0
		inr	a
		jnz	int6_1		
		xra	a
		dcr	a
int6_1:		sta	key_0
		jmp	int7_0
int6_2:		xra	a
		sta	key_0
		jmp	int7_0
int7_0:	
		mvi	a,0xfb
		out	0x03
		in	0x02
		ani	0x02 ; 1
		jnz	int7_2
		lda	key_1
		inr	a
		jnz	int7_1		
		xra	a
		dcr	a
int7_1:		sta	key_1
		jmp	int8_0
int7_2:		xra	a
		sta	key_1
		jmp	int8_0
int8_0:	
		mvi	a,0xfb
		out	0x03
		in	0x02
		ani	0x04 ; 2
		jnz	int8_2
		lda	key_2
		inr	a
		jnz	int8_1		
		xra	a
		dcr	a
int8_1:		sta	key_2
		jmp	int9_0
int8_2:		xra	a
		sta	key_2
		jmp	int9_0
int9_0:	
		mvi	a,0xfb
		out	0x03
		in	0x02
		ani	0x08 ; 3
		jnz	int9_2
		lda	key_3
		inr	a
		jnz	int9_1		
		xra	a
		dcr	a
int9_1:		sta	key_3
		jmp	int10_0
int9_2:		xra	a
		sta	key_3
		jmp	int10_0
int10_0:	
		mvi	a,0xfb
		out	0x03
		in	0x02
		ani	0x10 ; 4
		jnz	int10_2
		lda	key_4
		inr	a
		jnz	int10_1		
		xra	a
		dcr	a
int10_1:	sta	key_4
		jmp	int11_0
int10_2:	xra	a
		sta	key_4
		jmp	int11_0
int11_0:	
		mvi	a,0xfb
		out	0x03
		in	0x02
		ani	0x20 ; 5
		jnz	int11_2
		lda	key_5
		inr	a
		jnz	int11_1		
		xra	a
		dcr	a
int11_1:	sta	key_5
		jmp	int12_0
int11_2:	xra	a
		sta	key_5
		jmp	int12_0
int12_0:	
		mvi	a,0xfb
		out	0x03
		in	0x02
		ani	0x40 ; 6
		jnz	int12_2
		lda	key_6
		inr	a
		jnz	int12_1		
		xra	a
		dcr	a
int12_1:	sta	key_6
		jmp	int13_0
int12_2:	xra	a
		sta	key_6
		jmp	int13_0
int13_0:	
		mvi	a,0xfb
		out	0x03
		in	0x02
		ani	0x80 ; 7
		jnz	int13_2
		lda	key_7
		inr	a
		jnz	int13_1		
		xra	a
		dcr	a
int13_1:	sta	key_7
		jmp	int14_0
int13_2:	xra	a
		sta	key_7
		jmp	int14_0
int14_0:	
		mvi	a,0xf7
		out	0x03
		in	0x02
		ani	0x01 ; 8
		jnz	int14_2
		lda	key_8
		inr	a
		jnz	int14_1		
		xra	a
		dcr	a
int14_1:	sta	key_8
		jmp	int15_0
int14_2:	xra	a
		sta	key_8
		jmp	int15_0
int15_0:	
		mvi	a,0xf7
		out	0x03
		in	0x02
		ani	0x02 ; 9
		jnz	int15_2
		lda	key_9
		inr	a
		jnz	int15_1		
		xra	a
		dcr	a
int15_1:	sta	key_9
		jmp	int16_0
int15_2:	xra	a
		sta	key_9
		jmp	int16_0
int16_0:
		mvi	a,0x88
		out	0x00
		mvi	a,0xff
		out	0x03
		pop	b
		pop	d
		pop	h
		pop	psw
		ei
		ret
;---------------------------------------------------------
page:		db 0x01
row:		db 0x01
pos:		db 0x01
key_up:		db 0x00 
key_down:	db 0x00 
key_left:	db 0x00 
key_right:	db 0x00 
key_space:	db 0x00 
key_0:		db 0x00 
key_1:		db 0x00 
key_2:		db 0x00 
key_3:		db 0x00 
key_4:		db 0x00 
key_5:		db 0x00 
key_6:		db 0x00 
key_7:		db 0x00 
key_8:		db 0x00 
key_9:		db 0x00 
; frame
str_page:	db 'PAGE: 1     FILE: 001',0x00
net:		db '         ',0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,'        ',0x00
		db '         ',0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,'        ',0x00
		db 0xd4,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd4,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd5,0x00
		db 0xd2,'               ',0xd2,'              ',0xd3,0x00
		db 0xd6,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd6,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd7,0x00
		db '         (c) www.sdhb.ru        ',0x00
empty:		db '               ',0x00
; palette
palette:	db 0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x38,0x07,0x07,0x07,0xff,0x07,0x3f,0x07,0x00
palette0:	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
; Font: font.pf
Char_000		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_001		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_002		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_003		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_004		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_005		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_006		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_007		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_008		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_009		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_010		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_011		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_012		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_013		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_014		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_015		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_016		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_017		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_018		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_019		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_020		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_021		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_022		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_023		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_024		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_025		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_026		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_027		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_028		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_029		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_030		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_031		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_032		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; ( )
Char_033		db	0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00	; (!)
Char_034		db	0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00	; (")
Char_035		db	0x66, 0x66, 0xFF, 0x66, 0xFF, 0x66, 0x66, 0x00	; (#)
Char_036		db	0x18, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x18, 0x00	; ($)
Char_037		db	0x62, 0x66, 0x0C, 0x18, 0x30, 0x66, 0x46, 0x00	; (%)
Char_038		db	0x3C, 0x66, 0x3C, 0x38, 0x67, 0x66, 0x3F, 0x00	; (&)
Char_039		db	0x06, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00	; (')
Char_040		db	0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00	; (()
Char_041		db	0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00	; ())
Char_042		db	0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00	; (*)
Char_043		db	0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00	; (+)
Char_044		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30	; (,)
Char_045		db	0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00	; (-)
Char_046		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00	; (.)
Char_047		db	0x00, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00	; (/)
Char_048		db	0x3C, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x3C, 0x00	; (0)
Char_049		db	0x18, 0x18, 0x38, 0x18, 0x18, 0x18, 0x7E, 0x00	; (1)
Char_050		db	0x3C, 0x66, 0x06, 0x0C, 0x30, 0x60, 0x7E, 0x00	; (2)
Char_051		db	0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00	; (3)
Char_052		db	0x06, 0x0E, 0x1E, 0x66, 0x7F, 0x06, 0x06, 0x00	; (4)
Char_053		db	0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00	; (5)
Char_054		db	0x3C, 0x66, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00	; (6)
Char_055		db	0x7E, 0x66, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x00	; (7)
Char_056		db	0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00	; (8)
Char_057		db	0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00	; (9)
Char_058		db	0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00	; (:)
Char_059		db	0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30	; (;)
Char_060		db	0x0E, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0E, 0x00	; (<)
Char_061		db	0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00	; (=)
Char_062		db	0x70, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x70, 0x00	; (>)
Char_063		db	0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00	; (?)
Char_064		db	0x3C, 0x66, 0x6E, 0x6E, 0x60, 0x62, 0x3C, 0x00	; (@)
Char_065		db	0x18, 0x3C, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00	; (A)
Char_066		db	0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (B)
Char_067		db	0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00	; (C)
Char_068		db	0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00	; (D)
Char_069		db	0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x7E, 0x00	; (E)
Char_070		db	0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x00	; (F)
Char_071		db	0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00	; (G)
Char_072		db	0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00	; (H)
Char_073		db	0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00	; (I)
Char_074		db	0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00	; (J)
Char_075		db	0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00	; (K)
Char_076		db	0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00	; (L)
Char_077		db	0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63, 0x00	; (M)
Char_078		db	0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x00	; (N)
Char_079		db	0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00	; (O)
Char_080		db	0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00	; (P)
Char_081		db	0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0E, 0x00	; (Q)
Char_082		db	0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00	; (R)
Char_083		db	0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00	; (S)
Char_084		db	0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00	; (T)
Char_085		db	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00	; (U)
Char_086		db	0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00	; (V)
Char_087		db	0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00	; (W)
Char_088		db	0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00	; (X)
Char_089		db	0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00	; (Y)
Char_090		db	0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00	; (Z)
Char_091		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; ([)
Char_092		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (\)
Char_093		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (])
Char_094		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (^)
Char_095		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E	; (_)
Char_096		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (`)
Char_097		db	0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00	; (a)
Char_098		db	0x00, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (b)
Char_099		db	0x00, 0x00, 0x3C, 0x60, 0x60, 0x60, 0x3C, 0x00	; (c)
Char_100		db	0x00, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3E, 0x00	; (d)
Char_101		db	0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00	; (e)
Char_102		db	0x00, 0x0E, 0x18, 0x3E, 0x18, 0x18, 0x18, 0x00	; (f)
Char_103		db	0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x7C	; (g)
Char_104		db	0x00, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x00	; (h)
Char_105		db	0x00, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3C, 0x00	; (i)
Char_106		db	0x00, 0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0x3C	; (j)
Char_107		db	0x00, 0x60, 0x60, 0x6C, 0x78, 0x6C, 0x66, 0x00	; (k)
Char_108		db	0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00	; (l)
Char_109		db	0x00, 0x00, 0x66, 0x7F, 0x7F, 0x6B, 0x63, 0x00	; (m)
Char_110		db	0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00	; (n)
Char_111		db	0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00	; (o)
Char_112		db	0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60	; (p)
Char_113		db	0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x06	; (q)
Char_114		db	0x00, 0x00, 0x7C, 0x66, 0x60, 0x60, 0x60, 0x00	; (r)
Char_115		db	0x00, 0x00, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x00	; (s)
Char_116		db	0x00, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x0E, 0x00	; (t)
Char_117		db	0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00	; (u)
Char_118		db	0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00	; (v)
Char_119		db	0x00, 0x00, 0x63, 0x6B, 0x7F, 0x3E, 0x36, 0x00	; (w)
Char_120		db	0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00	; (x)
Char_121		db	0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x0C, 0x78	; (y)
Char_122		db	0x00, 0x00, 0x7E, 0x0C, 0x18, 0x30, 0x7E, 0x00	; (z)
Char_123		db	0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00	; ({)
Char_124		db	0x0C, 0x12, 0x30, 0x7C, 0x30, 0x62, 0xFC, 0x00	; (|)
Char_125		db	0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00	; (})
Char_126		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (~)
Char_127		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_128		db	0x18, 0x3C, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00	; (.)
Char_129		db	0x7E, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (.)
Char_130		db	0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (.)
Char_131		db	0x7E, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00	; (.)
Char_132		db	0x3C, 0x34, 0x34, 0x34, 0x34, 0x7E, 0x66, 0x66	; (.)
Char_133		db	0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x7E, 0x00	; (.)
Char_134		db	0x6A, 0x6A, 0x6A, 0x3C, 0x6A, 0x6A, 0x6A, 0x00	; (.)
Char_135		db	0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00	; (.)
Char_136		db	0x66, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x66, 0x00	; (.)
Char_137		db	0x7E, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x66, 0x00	; (.)
Char_138		db	0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00	; (.)
Char_139		db	0x0E, 0x1E, 0x36, 0x66, 0x66, 0x66, 0x66, 0x00	; (.)
Char_140		db	0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63, 0x00	; (.)
Char_141		db	0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00	; (.)
Char_142		db	0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00	; (.)
Char_143		db	0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00	; (.)
Char_144		db	0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00	; (.)
Char_145		db	0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00	; (.)
Char_146		db	0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00	; (.)
Char_147		db	0x66, 0x66, 0x66, 0x3E, 0x06, 0x46, 0x3C, 0x00	; (.)
Char_148		db	0x3C, 0x5A, 0x5A, 0x5A, 0x3C, 0x18, 0x18, 0x00	; (.)
Char_149		db	0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00	; (.)
Char_150		db	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3F, 0x03	; (.)
Char_151		db	0x66, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x06, 0x00	; (.)
Char_152		db	0x63, 0x63, 0x63, 0x6B, 0x6B, 0x6B, 0x7F, 0x00	; (.)
Char_153		db	0x63, 0x63, 0x63, 0x6B, 0x6B, 0x6B, 0x7F, 0x03	; (.)
Char_154		db	0xE0, 0xE0, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (.)
Char_155		db	0x63, 0x63, 0x63, 0x7B, 0x67, 0x67, 0x7B, 0x00	; (.)
Char_156		db	0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (.)
Char_157		db	0x7C, 0x06, 0x06, 0x1E, 0x06, 0x06, 0x7C, 0x00	; (.)
Char_158		db	0x66, 0x6D, 0x6D, 0x7D, 0x6D, 0x6D, 0x66, 0x00	; (.)
Char_159		db	0x3E, 0x66, 0x66, 0x3E, 0x1E, 0x36, 0x66, 0x00	; (.)
Char_160		db	0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00	; (.)
Char_161		db	0x06, 0x3C, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00	; (.)
Char_162		db	0x00, 0x00, 0x7C, 0x66, 0x7C, 0x66, 0x7C, 0x00	; (.)
Char_163		db	0x00, 0x00, 0x7C, 0x64, 0x60, 0x60, 0x60, 0x00	; (.)
Char_164		db	0x00, 0x1C, 0x34, 0x34, 0x34, 0x7E, 0x66, 0x00	; (.)
Char_165		db	0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00	; (.)
Char_166		db	0x00, 0x00, 0x6A, 0x6A, 0x3C, 0x6A, 0x6A, 0x00	; (.)
Char_167		db	0x00, 0x00, 0x3C, 0x66, 0x0C, 0x66, 0x3C, 0x00	; (.)
Char_168		db	0x00, 0x00, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x00	; (.)
Char_169		db	0x24, 0x18, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x00	; (.)
Char_170		db	0x00, 0x00, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x00	; (.)
Char_171		db	0x00, 0x00, 0x0E, 0x1E, 0x36, 0x66, 0x66, 0x00	; (.)
Char_172		db	0x00, 0x00, 0x66, 0x7F, 0x7F, 0x6B, 0x63, 0x00	; (.)
Char_173		db	0x00, 0x00, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x00	; (.)
Char_174		db	0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00	; (.)
Char_175		db	0x00, 0x00, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x00	; (.)
Char_176		db	0x07, 0x1F, 0x3C, 0x38, 0x70, 0x70, 0x70, 0x70	; (.)
Char_177		db	0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE	; (.)
Char_178		db	0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x07, 0x06	; (.)
Char_179		db	0xE0, 0xF0, 0xF0, 0xB0, 0x38, 0x18, 0x1C, 0x1C	; (.)
Char_180		db	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E	; (.)
Char_181		db	0x00, 0x00, 0x00, 0x80, 0x80, 0xC1, 0xC1, 0xC1	; (.)
Char_182		db	0x78, 0x78, 0x78, 0xF8, 0xF8, 0xF8, 0xB8, 0xB8	; (.)
Char_183		db	0x0F, 0x3F, 0x78, 0x70, 0xE0, 0xE0, 0xE0, 0xFF	; (.)
Char_184		db	0xF3, 0xF3, 0x03, 0x03, 0x03, 0x03, 0x03, 0xF3	; (.)
Char_185		db	0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF	; (.)
Char_186		db	0xE0, 0xE0, 0x01, 0x01, 0x03, 0x03, 0x03, 0xC3	; (.)
Char_187		db	0x3F, 0xFF, 0xE0, 0xC0, 0x80, 0x80, 0x80, 0x80	; (.)
Char_188		db	0x80, 0xE0, 0xF0, 0x70, 0x39, 0x39, 0x39, 0x39	; (.)
Char_189		db	0x1F, 0x7F, 0xF0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0	; (.)
Char_190		db	0xC0, 0xF0, 0x78, 0x38, 0x1C, 0x1C, 0x1C, 0x1C	; (.)
Char_191		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_192		db	0x70, 0x70, 0x70, 0x70, 0x38, 0x3C, 0x1F, 0x07	; (.)
Char_193		db	0xFE, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFE, 0xFE	; (.)
Char_194		db	0x0C, 0x1C, 0x1F, 0x3F, 0x38, 0x38, 0x70, 0x70	; (.)
Char_195		db	0x0C, 0x0E, 0xFE, 0xFF, 0x07, 0x07, 0x03, 0x03	; (.)
Char_196		db	0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x8E, 0x8E	; (.)
Char_197		db	0x63, 0x63, 0x77, 0x36, 0x3E, 0x1C, 0x1C, 0x1C	; (.)
Char_198		db	0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38	; (.)
Char_199		db	0xFF, 0xE0, 0xE0, 0xE0, 0x70, 0x78, 0x3F, 0x0F	; (.)
Char_200		db	0xF3, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0xF3	; (.)
Char_201		db	0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF	; (.)
Char_202		db	0xE3, 0xF3, 0x73, 0x73, 0x71, 0xF1, 0xE0, 0x80	; (.)
Char_203		db	0x80, 0x80, 0x80, 0x80, 0xC0, 0xE0, 0xFF, 0x3F	; (.)
Char_204		db	0x39, 0x39, 0x39, 0x39, 0x70, 0xF0, 0xE0, 0x80	; (.)
Char_205		db	0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xF0, 0x7F, 0x1F	; (.)
Char_206		db	0x1C, 0x1C, 0x1C, 0x1C, 0x38, 0x78, 0xF0, 0xC0	; (.)
Char_207		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_208		db	0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00	; (.)
Char_209		db	0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00	; (.)
Char_210		db	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80	; (.)
Char_211		db	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01	; (.)
Char_212		db	0x00, 0x00, 0x00, 0xFF, 0x80, 0x80, 0x80, 0x80	; (.)
Char_213		db	0x00, 0x00, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01	; (.)
Char_214		db	0x80, 0x80, 0x80, 0x80, 0xFF, 0x00, 0x00, 0x00	; (.)
Char_215		db	0x01, 0x01, 0x01, 0x01, 0xFF, 0x00, 0x00, 0x00	; (.)
Char_216		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_217		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_218		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_219		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_220		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_221		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_222		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_223		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_224		db	0x00, 0x00, 0x7C, 0x66, 0x7C, 0x60, 0x60, 0x00	; (.)
Char_225		db	0x00, 0x00, 0x3C, 0x60, 0x60, 0x60, 0x3C, 0x00	; (.)
Char_226		db	0x00, 0x00, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00	; (.)
Char_227		db	0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x0C, 0x78	; (.)
Char_228		db	0x00, 0x00, 0x3C, 0x5A, 0x5A, 0x3C, 0x18, 0x00	; (.)
Char_229		db	0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00	; (.)
Char_230		db	0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3F, 0x03	; (.)
Char_231		db	0x00, 0x00, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x00	; (.)
Char_232		db	0x00, 0x00, 0x63, 0x6B, 0x6B, 0x6B, 0x7F, 0x00	; (.)
Char_233		db	0x00, 0x00, 0x63, 0x6B, 0x6B, 0x6B, 0x7F, 0x03	; (.)
Char_234		db	0x00, 0x00, 0xE0, 0xE0, 0x7C, 0x66, 0x7C, 0x00	; (.)
Char_235		db	0x00, 0x00, 0x66, 0x66, 0x76, 0x6E, 0x76, 0x00	; (.)
Char_236		db	0x00, 0x00, 0x60, 0x60, 0x7C, 0x66, 0x7C, 0x00	; (.)
Char_237		db	0x00, 0x00, 0x3C, 0x66, 0x0E, 0x66, 0x3C, 0x00	; (.)
Char_238		db	0x00, 0x00, 0x66, 0x6D, 0x7D, 0x6D, 0x66, 0x00	; (.)
Char_239		db	0x00, 0x00, 0x3E, 0x66, 0x3E, 0x36, 0x66, 0x00	; (.)
Char_240		db	0x24, 0x7E, 0x60, 0x60, 0x78, 0x60, 0x7E, 0x00	; (.)
Char_241		db	0x00, 0x24, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00	; (.)
Char_242		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_243		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_244		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_245		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_246		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_247		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_248		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_249		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_250		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_251		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_252		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_253		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_254		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
Char_255		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
			db 'FONT_END'
;---------------------------------------------------------
loader:		nop
		org 	0xe000
		di
; передача МК старшего байта смещения файла
		mov	a,d
		out 	0x07
; clock
		mvi a,0x10
		out 0x05
		inx h	; delay	3
		inx h
		inx h
		mvi a,0x00
		out 0x05
		inx h	; delay 3
		inx h
		inx h
; передача МК младшего байта смещения файла
		mov	a,e
		out 	0x07
; clock
		mvi a,0x10
		out 0x05
		inx d	; delay 3
		inx d
		inx d
		mvi a,0x00
		out 0x05
		inx d	; delay	13 (задержка, чтобы GAME500 успел посчитать смещение)
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
; read 'B' x 0x2000 byte from GAME500
		lxi h,0x0000
read_file1:
; clock
		mvi a,0x10
		out 0x05
		inx d	; delay	3
		inx d
		inx d
		mvi a,0x00
		out 0x05
; delay befor read (задержка, чтобы GAME500 успел прочитать байт с флэшки и выставить его в PB)
		inx d	; delay 13
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		in 6
		mov m,a
		inx h
		mov a,h
		cmp b
		jnz read_file1
; turn GAME500 from mode 2 to mode1
		mvi a,0x81
		out 0x07
; clock 
		mvi a,0x10
		out 0x05
		inx d	; delay 3
		inx d
		inx d
		mvi a,0x00
		out 0x05
;
		inx d	; delay 13
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		inx d
		mvi a,0x66
		out 0x07
; clock
		mvi a,0x10
		out 0x05
		inx d	; delay 3
		inx d
		inx d
		mvi a,0x00
		out 0x05
		jmp 0x0000
		ds	20000
		db 	'END'
